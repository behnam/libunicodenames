\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename libunicodenames.info
@settitle LibUnicodeNames
@setchapternewpage off
@c %**end of header

@c Merge the standard indexes into a single one.
@syncodeindex fn cp
@syncodeindex vr cp
@syncodeindex ky cp
@syncodeindex pg cp
@syncodeindex tp cp

@include version.texi

@copying

This manual is for LibUnicodeNames, a library for retrieving Unicode
annotation data.

Copyright @copyright{} 2012 Barry Schwartz

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 3, or (at your option) any
later version.

You should have received a copy of the GNU Lesser General Public
License along with LibUnicodeNames.  If not, see
<http://www.gnu.org/licenses/>.

@end quotation
@end copying

@dircategory Development
@direntry
* LibUnicodeNames: (libunicodenames).  A library for retrieving Unicode
                                       annotation data.
@end direntry

@titlepage
@title LibUnicodeNames
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage


@ifnottex
@node Top
@top LibUnicodeNames

@insertcopying

@menu
* Introduction::    What is LibUnicodeNames?
* Installing::      How to install LibUnicodeNames.
* Using in C::      How to use LibUnicodeNames in C.
* Using in C++::    How to use LibUnicodeNames in C++.
* Using in Python:: How to use LibUnicodeNames in Python.
@end menu

@end ifnottex


@node Introduction
@chapter What is LibUnicodeNames?

LibUnicodeNames makes it easy for your program to retrieve the
information contained in the @file{NamesList} file that is published by
the Unicode
Consortium.@footnote{@indicateurl{http://www.unicode.org/Public/UNIDATA/NamesList.html}}

LibUnicodeNames is intended to replace the libuninameslist
library@footnote{@indicateurl{https://github.com/fontforge/libuninameslist}},
providing better handling of locales and support for a wider range of
programming languages. Currently supported languages are C, C++, and
Python.

@node Installing
@chapter Installing LibUnicodeNames

For installation instructions, see the file @file{INSTALL} that
accompanies the source code.

To build from Git or Mercurial sources, run @code{autoreconf --install}
and then follow the instructions in the @file{INSTALL} file.

@node Using in C
@chapter Using LibUnicodeNames in C

FIXME: This chapter needs to be written.

@example
#include <libunicodenames.h>
@end example

@example
pkg-config --cflags libunicodenames
@end example

@example
pkg-config --libs libunicodenames
@end example

@example
typedef struct uninm_blocks_record
@{
  unsigned int start_point;
  unsigned int end_point;
@} uninm_blocks_record;

/* A names db handle. */
typedef struct uninm_names___db *uninm_names_db;

/* A blocks db handle. */
typedef struct uninm_blocks___db *uninm_blocks_db;

/* Get the path of the names db for the current locale. The string
   should be freed by the caller. If locale_base is non-NULL, then
   use it as the base directory for MO files; otherwise use the
   compiled-in locale directory. */
char *uninm_find_names_db (const char *locale_base);

/* Get the path of the blocks db for the current locale. The string
   should be freed by the caller. If locale_base is non-NULL, then
   use it as the base directory for MO files; otherwise use the
   compiled-in locale directory. */
char *uninm_find_blocks_db (const char *locale_base);

/* Open a names db. */
uninm_names_db uninm_names_db_open (const char *filename);

/* Open a blocks db. */
uninm_blocks_db uninm_blocks_db_open (const char *filename);

/* Close a names db. */
void uninm_names_db_close (uninm_names_db handle);

/* Close a blocks db. */
void uninm_blocks_db_close (uninm_blocks_db handle);

/* Retrieve the name of a Unicode codepoint. The string must not
   be freed by the caller. */
const char *uninm_name (uninm_names_db handle, unsigned int codepoint);

/* Retrieve the annotation of a Unicode codepoint. The string must
   not be freed by the caller. */
const char *uninm_annotation (uninm_names_db handle,
                              unsigned int codepoint);
@end example


@node Using in C++
@chapter Using LibUnicodeNames in C++

FIXME: This chapter needs to be written.

@example
#include <libunicodenames.h>
@end example

@example
using namespace libunicodenames;
@end example

@example
pkg-config --cflags libunicodenames++
@end example

@example
pkg-config --libs libunicodenames++
@end example

@example
class unicodenames_exception:public std::exception
@{
  virtual const char *what () throw ();
@};

class memory_exhausted:public unicodenames_exception
@{
  virtual const char *what () throw ();
@};

class open_failed:public unicodenames_exception
@{
  virtual const char *what () throw ();
@};

char *find_names_db (const char *locale_base = 0);
char *find_blocks_db (const char *locale_base = 0);

class unicodenames
@{
private:
  uninm_names_db db;

public:
  unicodenames (const char *filename);
   ~unicodenames ();

  const char *name (unsigned int codepoint)
  @{
    return uninm_name (db, codepoint);
  @}

  const char *annotation (unsigned int codepoint)
  @{
    return uninm_annotation (db, codepoint);
  @}
@};                            /* class unicodenames */
@end example


@node Using in Python
@chapter Using LibUnicodeNames in Python

FIXME: This chapter needs to be written.

@example
import unicodenames
@end example

@bye
