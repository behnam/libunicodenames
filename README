LibUnicodeNames
***************

This manual is for LibUnicodeNames, a library for retrieving Unicode
annotation data.

   Copyright (C) 2012 Barry Schwartz

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Lesser General Public License
     as published by the Free Software Foundation; either version 3, or
     (at your option) any later version.

     You should have received a copy of the GNU Lesser General Public
     License along with LibUnicodeNames.  If not, see
     <http://www.gnu.org/licenses/>.


1 What is LibUnicodeNames?
**************************

LibUnicodeNames makes it easy for your program to retrieve the
information contained in the `NamesList' file that is published by the
Unicode Consortium.(1)

   LibUnicodeNames is intended to replace the libuninameslist
library(2), providing better handling of locales and support for a
wider range of programming languages. Currently supported languages are
C, C++, and Python.

   ---------- Footnotes ----------

   (1) <http://www.unicode.org/Public/UNIDATA/NamesList.html>

   (2) <https://github.com/fontforge/libuninameslist>

2 Installing LibUnicodeNames
****************************

For installation instructions, see the file `INSTALL' that accompanies
the source code.

   To build from Git or Mercurial sources, run `autoreconf --install'
and then follow the instructions in the `INSTALL' file.

3 Using LibUnicodeNames in C
****************************

FIXME: This chapter needs to be written.

     #include <libunicodenames.h>

     pkg-config --cflags libunicodenames

     pkg-config --libs libunicodenames

     typedef struct uninm_blocks_record
     {
       unsigned int start_point;
       unsigned int end_point;
     } uninm_blocks_record;

     /* A names db handle. */
     typedef struct uninm_names___db *uninm_names_db;

     /* A blocks db handle. */
     typedef struct uninm_blocks___db *uninm_blocks_db;

     /* Get the path of the names db for the current locale. The string
        should be freed by the caller. If locale_base is non-NULL, then
        use it as the base directory for MO files; otherwise use the
        compiled-in locale directory. */
     char *uninm_find_names_db (const char *locale_base);

     /* Get the path of the blocks db for the current locale. The string
        should be freed by the caller. If locale_base is non-NULL, then
        use it as the base directory for MO files; otherwise use the
        compiled-in locale directory. */
     char *uninm_find_blocks_db (const char *locale_base);

     /* Open a names db. */
     uninm_names_db uninm_names_db_open (const char *filename);

     /* Open a blocks db. */
     uninm_blocks_db uninm_blocks_db_open (const char *filename);

     /* Close a names db. */
     void uninm_names_db_close (uninm_names_db handle);

     /* Close a blocks db. */
     void uninm_blocks_db_close (uninm_blocks_db handle);

     /* Retrieve the name of a Unicode codepoint. The string must not
        be freed by the caller. */
     const char *uninm_name (uninm_names_db handle, unsigned int codepoint);

     /* Retrieve the annotation of a Unicode codepoint. The string must
        not be freed by the caller. */
     const char *uninm_annotation (uninm_names_db handle,
                                   unsigned int codepoint);

4 Using LibUnicodeNames in C++
******************************

FIXME: This chapter needs to be written.

     #include <libunicodenames.h>

     using namespace libunicodenames;

     pkg-config --cflags libunicodenames++

     pkg-config --libs libunicodenames++

     class unicodenames_exception:public std::exception
     {
       virtual const char *what () throw ();
     };

     class memory_exhausted:public unicodenames_exception
     {
       virtual const char *what () throw ();
     };

     class open_failed:public unicodenames_exception
     {
       virtual const char *what () throw ();
     };

     char *find_names_db (const char *locale_base = 0);
     char *find_blocks_db (const char *locale_base = 0);

     class unicodenames
     {
     private:
       uninm_names_db db;

     public:
       unicodenames (const char *filename);
        ~unicodenames ();

       const char *name (unsigned int codepoint)
       {
         return uninm_name (db, codepoint);
       }

       const char *annotation (unsigned int codepoint)
       {
         return uninm_annotation (db, codepoint);
       }
     };                            /* class unicodenames */

5 Using LibUnicodeNames in Python
*********************************

FIXME: This chapter needs to be written.

     import unicodenames

